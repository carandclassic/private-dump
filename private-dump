#!/usr/bin/env php
<?php
require_once __DIR__ . '/vendor/autoload.php';

$dumpSettings = [
    'add-drop-database' => true,
    'add-drop-table' => true,
    'single-transaction' => true,
    'lock-tables' => false,
];

$console = new PrivateDump\Console();

$cli = new Commando\Command();
$cli->setHelp('Must create a JSON configuration file to specify data transformers - documentation https://github.com/ashleyhindle/private-dump');
$cli->option('c')->aka('configuration')->required()->description('Path to configuration file, defaults to private-dump.json')->defaultsTo('private-dump.json');
$cli->option('u')->aka('username')->description('Connection Username - overrides value in config file');
$cli->option('p')->aka('password')->description('Connection Password - overrides value in config file');
$cli->option('h')->aka('hostname')->description('Connection Hostname - overrides value in config file');

$overrides = [
    'username' => $cli['username'],
    'password' => $cli['password'],
    'hostname' => $cli['hostname'],
];

// We have to do this to allow empty strings (passwords mainly)
$overrides = array_filter($overrides, function ($value) {
   return $value !== null;
});

$config = new PrivateDump\Config($cli['configuration'], ['connection' => $overrides]);
$transformer = new PrivateDump\Transformer(Faker\Factory::create('en_GB'));

if (!$config->isValid()) {
    $console->error("Configuration ({$cli['configuration']}) isn't valid: {$config->getError()}", 1);
}

$databases = $config->get('databases');

foreach ($databases as $databaseName => $tables) {
    $dumper = new \Ifsnop\Mysqldump\Mysqldump($config->getDSN($databaseName), $config->get('connection.username'), $config->get('connection.password'), $dumpSettings);

    $tableLimits = $config->getTableLimits($databaseName);
    if (!empty($tableLimits)) {
        $dumper->setTableLimits($tableLimits);
    }

    $tableWheres = $config->getTableWheres($databaseName);
    if (!empty($tableWheres)) {
        $dumper->setTableWheres($tableWheres);
    }

    $dumper->setTransformTableRowHook(function ($tableName, array $row) use ($tables, $transformer) {
        if (!array_key_exists($tableName, $tables)) {
            return $row;
        }

        $tableConfig = $tables[$tableName];

        if (isset($tableConfig['@seed']) && is_numeric($row[$tableConfig['@seed']])) {
            $transformer->seed((int)$row[$tableConfig['@seed']]);
        }

        if (isset($tableConfig['@keepif'])) {
            if (!isset($tableConfig['@keepif']['regex']) || !isset($tableConfig['@keepif']['column'])) {
                echo "@keepif requires one column and one regex key".PHP_EOL;
                exit(1);
            }

            $keepIfColumn = $tableConfig['@keepif']['column'];
            $keepIfRegexp = '/' . $tableConfig['@keepif']['regex'] . '/';

            if ($keepIfColumn !== null && array_key_exists($keepIfColumn, $row)) {
                if (preg_match($keepIfRegexp, $row[$keepIfColumn]) === 1) {
                    return $row;
                }
            }
        }

        foreach ($row as $colName => $colValue) {
            if (!array_key_exists($colName, $tables[$tableName])) {
                continue;
            }

           $columnReplacer = $tables[$tableName][$colName];

            // Key value store, but also possible $options
            if (is_array($columnReplacer)) {
                // Key value store - $where on a different column name
                // If the value matches a key in '$transformers' then we can replace the value as normal, otherwise
                //    we will return the value as it is
                if (!empty($columnReplacer['$link'])) {
                    foreach ($columnReplacer['$transformers'] as $associateColumnValue => $replacer) {
                        // If this colValue == associate_column's value, then we can replace
                        if ($associateColumnValue == $row[$columnReplacer['$link']]) {
                            $row[$colName] = $transformer->transform($colValue, $replacer);
                            break;
                        }
                    }
                }

                // Backup - use same column value if an array and no ^ transformer above
                continue;
            }

            $row[$colName] = $transformer->transform($colValue, $columnReplacer);
        }

        return $row;
    });

    try {
        $dumper->start('php://output');
    } catch (\Exception $e) {
        $console->error("Failed to dump: {$e->getMessage()}", 3);
    }
}
